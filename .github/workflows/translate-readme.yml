name: Translate README

permissions:
  contents: write

on:
  push:
    branches:
      - main
    paths:
      - '[0-9][0-9][0-9][0-9]-*/README.md'  # LeetCode Î¨∏Ï†ú Ìå®ÌÑ¥Îßå (Ïòà: 0001-two-sum/README.md)
      - 'app/**/*.ts'
      - 'tsconfig.json'
      - 'package.json'
      - '.github/workflows/translate-readme.yml'
  workflow_dispatch: # ÏàòÎèô Ïã§Ìñâ ÏßÄÏõê

# Use the same concurrency group as leetcode-auto-update to prevent conflicts
concurrency:
  group: leetcode-processing-${{ github.ref }}
  cancel-in-progress: false

jobs:
  translate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2 # ÏµúÍ∑º 2Í∞ú Ïª§Î∞ãÎßå Í∞ÄÏ†∏ÏôÄÏÑú Ï∂©Îèå Í∞ÄÎä•ÏÑ± ÏµúÏÜåÌôî
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Type check TypeScript files
        run: npm run type-check

      - name: Check if this is a LeetHub commit
        id: check_commit
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"
          
          # LeetHub Ïª§Î∞ãÏù∏ÏßÄ ÌôïÏù∏ (LeetHub ÌäπÏßïÏ†ÅÏù∏ Ìå®ÌÑ¥ Í≤ÄÏÇ¨)
          if echo "$COMMIT_MSG" | grep -qE "(Create README - LeetHub|Time:|Space:|LeetHub|^[0-9]+\.|^\[[0-9]+\])"; then
            echo "is_leetcode=true" >> $GITHUB_OUTPUT
            echo "‚úÖ LeetHub commit detected, will run translation"
            
            # Î≥ÄÍ≤ΩÎêú ÌååÏùºÎì§ÎèÑ ÌôïÏù∏
            echo "üìã Changed files in this commit:"
            git diff --name-only HEAD~1 HEAD | grep -E "README\.md$" || echo "No README.md files changed"
          else
            echo "is_leetcode=false" >> $GITHUB_OUTPUT
            echo "‚ùå Not a LeetHub commit, skipping translation"
            echo "üìã Commit message patterns checked:"
            echo "  - Create README - LeetHub"
            echo "  - Time:"
            echo "  - Space:"
            echo "  - LeetHub"
            echo "  - Problem number patterns (e.g., '1.', '[1]')"
          fi

      - name: Find and translate changed README files
        if: steps.check_commit.outputs.is_leetcode == 'true'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "‚ö†Ô∏è OPENAI_API_KEY is not set, skipping translation"
            exit 0
          fi
          
          # Î≥ÄÍ≤ΩÎêú ÌååÏùºÎßå Î≤àÏó≠ (Îçî Ìö®Ïú®Ï†Å)
          npm run translate:changed

      - name: Commit changes
        if: steps.check_commit.outputs.is_leetcode == 'true'
        run: |
          git config --local user.email "${{ github.actor }}@users.noreply.github.com"
          git config --local user.name "${{ github.actor }}"
          git config pull.rebase false
          
          # Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
          if [ -z "$(git status --porcelain)" ]; then
            echo "No changes to commit"
            exit 0
          fi
          
          # Î≥ÄÍ≤ΩÏÇ¨Ìï≠ÏùÑ Î®ºÏ†Ä Ïä§ÌÖåÏù¥Ïßï
          git add .
          
          # ÏïàÏ†ÑÌïú pull Ï†ÑÎûµ - Í∞ÑÎã®Ìïú Ï†ëÍ∑ºÎ≤ï
          git fetch origin main
          git merge origin/main || {
            echo "Merge failed, trying to resolve automatically"
            # ÏûêÎèô Î≤àÏó≠ ÌååÏùºÎì§ÏùÄ Ï∂©Îèå Ïãú remote Î≤ÑÏ†Ñ Ïö∞ÏÑ†
            git checkout --theirs '*.md' || true
            git checkout --theirs '*.json' || true
            git add .
            git commit --no-edit || true
          }
          
          # ÏµúÏ¢Ö Ïª§Î∞ã Î∞è Ìë∏Ïãú
          git add .
          if git diff --cached --quiet; then
            echo "No staged changes to commit"
          else
            echo "Committing changes..."
            git commit -m "Update Korean translations [automated]" || echo "Commit failed, but continuing..."
            git push origin main || echo "Push failed, but workflow completed"
          fi

      - name: Trigger database update for new problems
        if: steps.check_commit.outputs.is_leetcode == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Analyzing commit for LeetCode problems to process..."
          
          # Get the problem directory from the current commit (LeetHub commit)
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "üìã Changed files: $CHANGED_FILES"
          
          # Find all problem directories in the commit
          PROBLEM_DIRS=()
          for file in $CHANGED_FILES; do
            if [[ $file =~ ^([0-9]{4,5}-[^/]+)/README\.md$ ]]; then
              PROBLEM_DIR="${BASH_REMATCH[1]}"
              if [[ ! " ${PROBLEM_DIRS[@]} " =~ " ${PROBLEM_DIR} " ]]; then
                PROBLEM_DIRS+=("$PROBLEM_DIR")
              fi
            fi
          done
          
          echo "üéØ Found ${#PROBLEM_DIRS[@]} problem(s) to process: ${PROBLEM_DIRS[*]}"
          
          # Process each problem directory
          for PROBLEM_DIR in "${PROBLEM_DIRS[@]}"; do
            echo "üìù Processing: $PROBLEM_DIR"
            
            # Extract problem number
            if [[ $PROBLEM_DIR =~ ^([0-9]+) ]]; then
              PROBLEM_NUMBER="${BASH_REMATCH[1]}"
              PROBLEM_NUMBER=$((10#$PROBLEM_NUMBER))
              
              echo "üöÄ Triggering database update for problem $PROBLEM_NUMBER ($PROBLEM_DIR)"
              
              # Trigger the database update workflow with retry logic
              for attempt in {1..3}; do
                echo "üì° API call attempt $attempt/3"
                
                response=$(curl -w "%{http_code}" -s -X POST \
                  -H "Accept: application/vnd.github+json" \
                  -H "Authorization: Bearer $GITHUB_TOKEN" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  "https://api.github.com/repos/${{ github.repository }}/actions/workflows/leetcode-auto-update.yml/dispatches" \
                  -d "{\"ref\":\"main\",\"inputs\":{\"problem_number\":\"$PROBLEM_NUMBER\"}}")
                
                http_code="${response: -3}"
                
                if [ "$http_code" = "204" ]; then
                  echo "‚úÖ Successfully triggered database update for problem $PROBLEM_NUMBER"
                  break
                elif [ $attempt -eq 3 ]; then
                  echo "‚ùå Failed to trigger workflow after 3 attempts. HTTP code: $http_code"
                  echo "Response: ${response%???}"
                else
                  echo "‚ö†Ô∏è Attempt $attempt failed (HTTP: $http_code), retrying in 2 seconds..."
                  sleep 2
                fi
              done
              
              # Small delay between multiple problems
              if [ ${#PROBLEM_DIRS[@]} -gt 1 ]; then
                echo "‚è≥ Waiting 3 seconds before processing next problem..."
                sleep 3
              fi
            else
              echo "‚ùå Could not extract problem number from directory: $PROBLEM_DIR"
            fi
          done
          
          if [ ${#PROBLEM_DIRS[@]} -eq 0 ]; then
            echo "‚ÑπÔ∏è No LeetCode problem directories found in changed files"
            echo "üîç Files checked: $CHANGED_FILES"
          else
            echo "üéâ Completed processing ${#PROBLEM_DIRS[@]} problem(s)"
          fi

      - name: Workflow completion summary
        if: steps.check_commit.outputs.is_leetcode == 'true'
        run: |
          echo "üìä === LeetHub Processing Complete ==="
          echo "‚úÖ Korean translation: Complete"
          echo "‚úÖ Database update trigger: Complete"  
          echo "üîÑ Next: Watch for 'LeetCode Auto Database Update' workflow execution"
          echo "================================================"
