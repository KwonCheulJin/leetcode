name: LeetCode Auto Database Update

on:
  push:
    branches: [main]
    paths:
      - '[0-9][0-9][0-9][0-9]-*/**'
      - '[0-9][0-9][0-9][0-9][0-9]-*/**'
  workflow_dispatch:
    inputs:
      problem_number:
        description: 'Ï≤òÎ¶¨Ìï† Î¨∏Ï†ú Î≤àÌò∏ (Ïòà: 1, 53, 125)'
        required: false
        type: string
      force_english:
        description: 'README.en.md Í∞ïÏ†ú Ïû¨ÏÉùÏÑ±'
        required: false
        type: boolean
        default: false

jobs:
  update-database:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Detect changed LeetCode problems or handle manual input
        id: detect-changes
        run: |
          # Check if this is a manual workflow dispatch
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "üîß ÏàòÎèô Ïã§Ìñâ Î™®Îìú"
            PROBLEM_NUMBER="${{ github.event.inputs.problem_number }}"
            
            if [ -n "$PROBLEM_NUMBER" ]; then
              # Find problem directory by number
              PROBLEM_DIR=$(find . -maxdepth 1 -type d -name "${PROBLEM_NUMBER}*" -o -name "0${PROBLEM_NUMBER}*" -o -name "00${PROBLEM_NUMBER}*" -o -name "000${PROBLEM_NUMBER}*" | head -1 | sed 's|^\./||')
              
              if [ -n "$PROBLEM_DIR" ]; then
                echo "üìù ÏàòÎèô Ïã§Ìñâ: Î¨∏Ï†ú $PROBLEM_NUMBER ($PROBLEM_DIR)"
                echo "problems=$PROBLEM_DIR" >> $GITHUB_OUTPUT
                echo "has_changes=true" >> $GITHUB_OUTPUT
                echo "manual_mode=true" >> $GITHUB_OUTPUT
              else
                echo "‚ùå Î¨∏Ï†ú Î≤àÌò∏ $PROBLEM_NUMBER Ïóê Ìï¥ÎãπÌïòÎäî ÎîîÎ†âÌÜ†Î¶¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."
                echo "has_changes=false" >> $GITHUB_OUTPUT
                echo "manual_mode=true" >> $GITHUB_OUTPUT
              fi
            else
              echo "‚ùå ÏàòÎèô Ïã§Ìñâ Ïãú Î¨∏Ï†ú Î≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."
              echo "has_changes=false" >> $GITHUB_OUTPUT
              echo "manual_mode=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "üîÑ ÏûêÎèô Ïã§Ìñâ Î™®Îìú (Ìë∏Ïãú Ìä∏Î¶¨Í±∞)"
            # Get list of changed files in the latest commit
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            echo "Changed files:"
            echo "$CHANGED_FILES"

            # Find LeetCode problem directories that were modified
            CHANGED_PROBLEMS=""
            for file in $CHANGED_FILES; do
              # Extract problem directory (e.g., "0001-two-sum/README.md" -> "0001-two-sum")
              if [[ $file =~ ^([0-9]{4,5}-[^/]+)/ ]]; then
                PROBLEM_DIR="${BASH_REMATCH[1]}"
                # Add to list if not already present
                if [[ ! $CHANGED_PROBLEMS =~ $PROBLEM_DIR ]]; then
                  if [ -z "$CHANGED_PROBLEMS" ]; then
                    CHANGED_PROBLEMS="$PROBLEM_DIR"
                  else
                    CHANGED_PROBLEMS="$CHANGED_PROBLEMS,$PROBLEM_DIR"
                  fi
                fi
              fi
            done

            echo "Detected changed problems: $CHANGED_PROBLEMS"
            echo "problems=$CHANGED_PROBLEMS" >> $GITHUB_OUTPUT
            echo "manual_mode=false" >> $GITHUB_OUTPUT

            # Set flag for whether any problems were detected
            if [ -n "$CHANGED_PROBLEMS" ]; then
              echo "has_changes=true" >> $GITHUB_OUTPUT
            else
              echo "has_changes=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Extract problem number from directory
        id: extract-number
        if: steps.detect-changes.outputs.has_changes == 'true'
        run: |
          PROBLEMS="${{ steps.detect-changes.outputs.problems }}"
          # Take only the first problem for single problem processing
          FIRST_PROBLEM=$(echo "$PROBLEMS" | cut -d',' -f1)
          echo "Processing problem directory: $FIRST_PROBLEM"

          # Extract problem number (e.g., "0001-two-sum" -> "1")
          if [[ $FIRST_PROBLEM =~ ^([0-9]+) ]]; then
            PROBLEM_NUMBER="${BASH_REMATCH[1]}"
            # Remove leading zeros
            PROBLEM_NUMBER=$((10#$PROBLEM_NUMBER))
            echo "Extracted problem number: $PROBLEM_NUMBER"
            echo "number=$PROBLEM_NUMBER" >> $GITHUB_OUTPUT
            echo "directory=$FIRST_PROBLEM" >> $GITHUB_OUTPUT
          else
            echo "Could not extract problem number from: $FIRST_PROBLEM"
            exit 1
          fi

      - name: Check if README.en.md exists, create if needed
        if: steps.detect-changes.outputs.has_changes == 'true'
        run: |
          PROBLEM_DIR="${{ steps.extract-number.outputs.directory }}"
          PROBLEM_NUMBER="${{ steps.extract-number.outputs.number }}"
          FORCE_ENGLISH="${{ github.event.inputs.force_english }}"

          if [ ! -f "$PROBLEM_DIR/README.en.md" ] || [ "$FORCE_ENGLISH" = "true" ]; then
            if [ "$FORCE_ENGLISH" = "true" ]; then
              echo "üîÑ README.en.md Í∞ïÏ†ú Ïû¨ÏÉùÏÑ± Î™®Îìú"
            else
              echo "üìù README.en.md not found for problem $PROBLEM_NUMBER, creating..."
            fi
            npm run fix:english problem $PROBLEM_NUMBER
          else
            echo "‚úÖ README.en.md already exists for problem $PROBLEM_NUMBER"
          fi

      - name: Process and update database
        if: steps.detect-changes.outputs.has_changes == 'true'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          PROBLEM_NUMBER="${{ steps.extract-number.outputs.number }}"
          echo "Processing problem number: $PROBLEM_NUMBER"

          # Process the problem and update database
          npm run data:process -- --problem=$PROBLEM_NUMBER

          echo "‚úÖ Successfully processed problem $PROBLEM_NUMBER"

      - name: Commit English translation if created
        if: steps.detect-changes.outputs.has_changes == 'true'
        run: |
          PROBLEM_DIR="${{ steps.extract-number.outputs.directory }}"

          # Check if README.en.md was created and commit it
          if [ -f "$PROBLEM_DIR/README.en.md" ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"

            git add "$PROBLEM_DIR/README.en.md"

            # Only commit if there are changes to commit
            if ! git diff --staged --quiet; then
              git commit -m "feat: Add English translation for problem ${{ steps.extract-number.outputs.number }}

            ü§ñ Generated with Claude Code
              Co-Authored-By: Claude <noreply@anthropic.com>"

              git push
              echo "‚úÖ Committed English translation for problem ${{ steps.extract-number.outputs.number }}"
            else
              echo "‚ÑπÔ∏è No changes to commit for English translation"
            fi
          fi

      - name: Update statistics
        if: steps.detect-changes.outputs.has_changes == 'true'
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo "üìä Updated database statistics:"
          npm run data:stats

      - name: Report results
        if: steps.detect-changes.outputs.has_changes == 'true'
        run: |
          PROBLEM_NUMBER="${{ steps.extract-number.outputs.number }}"
          PROBLEM_DIR="${{ steps.extract-number.outputs.directory }}"

          echo "üéâ LeetCode Auto Update Completed!"
          echo "   üìù Problem: #$PROBLEM_NUMBER ($PROBLEM_DIR)"
          echo "   ‚úÖ Database updated successfully"
          echo "   üåê English translation processed"
          echo "   üìä Statistics refreshed"

      - name: No changes detected
        if: steps.detect-changes.outputs.has_changes == 'false'
        run: |
          echo "‚ÑπÔ∏è No LeetCode problem changes detected in this commit"
          echo "   Only commits that modify problem directories trigger database updates"
